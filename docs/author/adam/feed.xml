<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>/</title>
   
   <link>/</link>
   <description>introducing Python to chemistry students</description>
   <language>en-uk</language>
   
      
            
      
            
      
            
      
            
               
               
                  <managingEditor>Adam Symington</managingEditor>
            
      
   
   <title>
   <![CDATA[ Adam Symington - pythoninchemistry ]]>
   </title>
   <description>
   <![CDATA[ introducing Python to chemistry students ]]>
   </description>
   <link>/</link>
   <image>
   <url>/assets/images/pic.png</url>
   <title>Adam Symington - pythoninchemistry</title>
   <link>/</link>
   </image>
   <generator>Jekyll 3.6.2</generator>
   <lastBuildDate></lastBuildDate>
   <atom:link href="/author/adam/rss.xml" rel="self" type="application/rss+xml"/>
   <ttl>60</ttl>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Advanced Practical Chemistry - Part II</title>
	  <link>/advanced-practical-chemistry-2</link>
		
				
		
				
		
				
		
				
						<author>Adam Symington</author>
				
		
	  <pubDate>2018-11-09T00:00:00+00:00</pubDate>
	  <guid>/advanced-practical-chemistry-2</guid>
	  <description><![CDATA[
	     <p>After the introduction to molecular dynamics in <a href="./advanced-practical-chemistry">week 1</a>, the students were unleased on their own mini-research project - investigating the transport properties of CaF<sub>2</sub>.
In this exercise, we wanted the students to user DL_POLY to determine the temperature range within which CaF<sub>2</sub> becomes a <a href="https://en.wikipedia.org/wiki/Fast_ion_conductor">fast ion conductor</a>.
For context, CaF<sub>2</sub> is already well studied and was choosen because the literature is full of examples for students to compare their results against.</p>

<h3 id="week-2">Week 2</h3>

<p>This week, and the subsequent two weeks, aim to put emphasis on the transport properties of materials and on how to analyse the large quantities of data produces by MD simulations.
The transport properties of a material are important in many modern technological applications.
For example, solid oxide fuel cells (SOFCs - alternatives to traditional batteries) are dependent on the movement of charge carriers through the solid electrolyte and nuclear fuel materials oxidise and fall apart and this corrosive behaviour is dependent on the diffusion of oxygen into the lattice.
Due to the importance of the transport properties of these materials, scientists and engineers spend large amounts of their time trying to optimise these properties.</p>

<p>The week began with a background tutorial in how to use DL_POLY within a Jupyter Notebook.
In this way, we could provide the instruction in Markdown cells, and then the DL_POLY simulations could be launched with a subprocess call in the following code cell.
This would eliminate the need for a traditional, printed lab manual.</p>

<p>Transport properties are the end game of the exercise, so it is important to show the students how to analyses their data in order to obtain diffusion coefficients and what these quantities actually mean.
DL_POLY prints out a diffusion coefficient, but this is useless in a learning environment because the students need to understand where the number comes from.
So a theoretical background was provided in Markdown cells explaining mean squared displacements (MSD) and Arrhenius plots.</p>

<p>The final part of the tutorial, before the students we set loose, to determine the fast ion conduction temperature range in CaF<sub>2</sub> was to show them how to analyse their data.
A few months ago, as a learning/procrastination exercise, I wrote an MSD analysis code for DL_POLY, so the students were given a stripped down version to use for analysis.
The general workflow looks like this.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="n">msd</span><span class="o">.</span><span class="n">read_history</span><span class="p">(</span><span class="s">"Example/HISTORY"</span><span class="p">,</span> <span class="s">"F"</span><span class="p">)</span> <span class="n">msd_data</span> <span class="o">=</span> <span class="n">msd</span><span class="o">.</span><span class="n">run_msd</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">msd_data</span><span class="p">[</span><span class="s">'time'</span><span class="p">],</span> <span class="n">msd_data</span><span class="p">[</span><span class="s">'msd'</span><span class="p">],</span> <span class="n">lw</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"red"</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"MSD"</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">msd_data</span><span class="p">[</span><span class="s">'time'</span><span class="p">],</span> <span class="n">msd_data</span><span class="p">[</span><span class="s">'xmsd'</span><span class="p">],</span> <span class="n">lw</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"blue"</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"X-MSD"</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">msd_data</span><span class="p">[</span><span class="s">'time'</span><span class="p">],</span> <span class="n">msd_data</span><span class="p">[</span><span class="s">'ymsd'</span><span class="p">],</span> <span class="n">lw</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"green"</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"Y-MSD"</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">msd_data</span><span class="p">[</span><span class="s">'time'</span><span class="p">],</span> <span class="n">msd_data</span><span class="p">[</span><span class="s">'zmsd'</span><span class="p">],</span> <span class="n">lw</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"black"</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"Z-MSD"</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">"MSD ("</span> <span class="s">r'$\AA$'</span> <span class="s">")"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Time / ps"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">amax</span><span class="p">(</span><span class="n">msd_data</span><span class="p">[</span><span class="s">'msd'</span><span class="p">]))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">amax</span><span class="p">(</span><span class="n">msd_data</span><span class="p">[</span><span class="s">'time'</span><span class="p">]))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p align="center">
<img src="/assets/images/apc003.png" style="width: 80%" />​
</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">slope</span><span class="p">,</span> <span class="n">intercept</span><span class="p">,</span> <span class="n">r_value</span><span class="p">,</span> <span class="n">p_value</span><span class="p">,</span> <span class="n">std_err</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">linregress</span><span class="p">(</span><span class="n">msd_data</span><span class="p">[</span><span class="s">'time'</span><span class="p">],</span> <span class="n">msd_data</span><span class="p">[</span><span class="s">'msd'</span><span class="p">])</span>

<span class="n">diffusion_coefficient</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">average</span><span class="p">(</span><span class="n">slope</span><span class="p">)</span> <span class="o">/</span> <span class="mi">6</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Diffusion Coefficient: "</span><span class="p">,</span> <span class="n">diffusion_coefficient</span><span class="p">,</span> <span class="s">" X 10 ^-9 (m/s^-2)"</span><span class="p">)</span>
</code></pre></div></div>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Diffusion Coefficient: 1.4550282026323467 X 10 ^-9 (m/s^-2)
</code></pre></div></div>

<p>And that was it.</p>

<p>It took them about an hour to get through the full tutorial and then they were free to run theiry own simulations at various temperatures.
For me, it proved to be an interesting teaching experiment.
In order to analyse their data they had two options, they could open the DL_POLY output and copy the diffusion coefficient to an Excel spreadsheet, or they could use the method outlined above and analyse their simulations programmatically in a single notebook.
I was pleased to note that nearly everyone used the latter method, for a variety of reasons:</p>

<ol>
  <li>The students were required to keep a <em>hand-written</em> lab book to ensure reproducibility (sigh). Students would record everything that they did and then a member of staff would grade it based upon how likely it is that they could repeat their work. Some of the students quickly deduced that by running everything in a notebook, they could provide their simulation data along with the notebook and by definition of the mark scheme…get full marks.</li>
  <li>The MSD plot shown above can reveal an awful lot about the behaviour of the system. For example, the figure below compares the MSD for fluorine at 1500 K (left) and 300 K (right). It is easy to tell from these the state of the system.</li>
  <li>Simplicity. Some students ran 30+ simulations and quickly realised that opening the large output file, searching for the diffusion coefficient and then copying it to excel is <strong>incredibly</strong> boring and tedious.</li>
</ol>

<p align="center">
<img src="/assets/images/apc004.png" style="width: 80%" />​
</p>

<h3 id="feedback">Feedback</h3>

<p>In the past, we have run this lab without the Python based tutorials, or the introduction to molecular dynamics.
I remember last year being asked by two students why they had both run the same simulation but got slightly different diffusion coefficients.
I have to explain what MD was and that the initial velocities were assigned randomly, thus their answeres would be slightly different.
When asked the same question this year, my answer was simply “think back to last week”, and within 15 seconds this was met with “Oh yeah! The velocities are randomly assigned”.
So the introduction to MD in week 1 was clearly a success.</p>

<p>Feedback this week was largely positive, there were issues at the beginning with setting up file-paths to the DL_POLY code, this may need to be addressed in future years as it was clear that file-paths go beyond some students understanding.
In contrast to last year, much les time was devoted to copying diffusion coefficients from an output file to a spreadsheet and much more time was spent actually thinking about the data collected.
The students who has not dabbled with Python before week 1 had no issues with the programming in week 2 and were able to use the analysis code without any difficulty.
In future years, I think that the programming can be expanded further and they would be able to write their own bits of analysis, for example they were given the above snippet, however I believe that many could write it themselves without any difficulty.</p>

<p>In week 3 the students will be taking on Frenkel and Schottky defects - stay tuned.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Advanced Practical Chemistry - Part I</title>
	  <link>/advanced-practical-chemistry</link>
		
				
		
				
		
				
		
				
						<author>Adam Symington</author>
				
		
	  <pubDate>2018-11-06T00:00:00+00:00</pubDate>
	  <guid>/advanced-practical-chemistry</guid>
	  <description><![CDATA[
	     <p>A few months ago, I volunteered, along with <a href="https://arm61.github.io">Andrew McCluskey</a> to rewrite the third-year computational chemistry lab module at the University of Bath.
At the time, Andrew had just published his <em>summer procrastination</em> - <a href="https://doi.org/10.21105/jose.00019">pylj</a>, which is an educational software that introduces students to classical atomistic simulations, and this lab seemed like the perfect opportunity to depoly it in a teaching environment.</p>

<p>Our course is based entirely in <a href="https://jupyter.org">Jupyter Notebooks</a> and introduces students to classical molecular dynamics using pylj, and solid state chemistry using DL_POLY and METADISE.
Students will learn the theory of MD, ionic transport, defect chemsitry, and they will have the freedom to answer theiry own research questions.
Over the next four weeks the students will be working through our lab course and I will write a weekly blog post, hopefully highlighting how Python is being used to enhance the learning experience of chemistry undergraduate students.</p>

<h3 id="week-one">Week One</h3>

<p>This week exclusively used pylj and involved students building, step by step their own MD code, which they then used to construct a 2D phase diagram of argon gas.
Jupyter Notebooks allow us to teach in a much more interactive way.
Take the Lennard-Jones model for example.</p>

<script type="math/tex; mode=display">E_{\text{attractive}}(r_{ij}) = \frac{-B}{r_{ij}^6},</script>

<p>where $B$ is some constant for the interaction, and $r_{ij}$ is the distance between the two atoms.
The Pauli exclusion principle is repulsive and only present over very short distances, and therefore is modelled with the relation,</p>

<script type="math/tex; mode=display">E_{\text{repulsive}}(r_{ij}) = \frac{A}{r_{ij}^{12}},</script>

<p>again $A$ is some interaction specific constant.
The total Lennard-Jones interaction is then the linear combination of these two terms,</p>

<script type="math/tex; mode=display">E_{\text{LJ}}(r_{ij}) = E_{\text{repulsive}}(r_{ij}) + E_{\text{attractive}}(r_{ij}) = \frac{A}{r_{ij}^{12}} - \frac{B}{r_{ij}^6}.</script>

<p>It is easy to present these equations and graphical representation in a lab manual, but the effectiveness of this is debatable.
In our course, students were given the equation and then asked to define a function and then plot the attractive, repulsive and total energy of the Lennard-Jones interaction, as shown below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="k">def</span> <span class="nf">attractive</span><span class="p">(</span><span class="n">dr</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="o">-</span><span class="n">b</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">power</span><span class="p">(</span><span class="n">dr</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">repulsive</span><span class="p">(</span><span class="n">dr</span><span class="p">,</span> <span class="n">a</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">power</span><span class="p">(</span><span class="n">dr</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">lj</span><span class="p">(</span><span class="n">dr</span><span class="p">,</span> <span class="n">constants</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">repulsive</span><span class="p">(</span><span class="n">dr</span><span class="p">,</span> <span class="n">constants</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">attractive</span><span class="p">(</span><span class="n">dr</span><span class="p">,</span> <span class="n">constants</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">3e-10</span><span class="p">,</span> <span class="mf">8e-10</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">attractive</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mf">9.273e-78</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="s">'Attractive'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">repulsive</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mf">1.363e-134</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="s">'Repulsive'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">lj</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.363e-134</span><span class="p">,</span> <span class="mf">9.273e-78</span><span class="p">]),</span> <span class="n">label</span><span class="o">=</span><span class="s">'Lennard-Jones'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">r'$r_{ij}$/m'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">r'$E$/J'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div></div>
<p align="center">
<img src="/assets/images/apc001.png" style="width: 80%" />​
</p>

<p>In this way, we ensured that students not only understood the Lennard-Jones potential, but also developed their programming knowledge, which at the very least is a useful transferable skill.</p>

<p>The first half of the course follows these lines and involves the theory of molecular dynamics written in Markdown cells within the notebook.
Mixed with code cells, where students would build functions to do each part of the eventual simulation, e.g. update particle positions.</p>

<p>Following the introduction of MD, students had to use pylj to generate the 2D phase diagram of argon gas, by varying the temperature of the simulation and the number of particles.
Below is an example of such a phase diagram.</p>

<p align="center">
<img src="/assets/images/apc002.png" style="width: 80%" />​
</p>

<h4 id="feedback">Feedback</h4>

<p>This class contained a mix of students who had encountered Python and students who had not.
There was certainly a barrier that needed to be hurdled for the non-programming students, but the lab was definitely accesible to them and they were able to achieve the learning outcomes.
The non-programmers saw the trasferable skills argument and were actually very happy to try theiry hand at some light programming.
There were issues with setting up the notebook before peopl ecould embark on the exercise.
However, this is more down to the implementation of the Jupyter Notebooks on the University computers, than the exercise itself.
In future years, more effort does need to be take to make the setup as painless as possible because it is better that students dont’ get ticked off when trying to build conda environments.</p>

	  ]]></description>
	</item>


</channel>
</rss>
